**2013/07/24

* MPU実行ルーチンを入れ替える
xkeropi: M68KRUN() (68kem.asm/_68KRUN)
cps2: m68000/c68k.c/INT32  C68k_Exec(c68k_struc *cpu, INT32 cycle)

* cps2側はc68k_struct C68K構造体で、レジスタ等を管理している。xkeropiの各変数をこの構造体にマッピングしていく

typedef struct c68k_t
{
	UINT32 D[8];
	UINT32 A[8];

	UINT32 flag_C;
	UINT32 flag_V;
	UINT32 flag_Z;
	UINT32 flag_N;

	UINT32 flag_X;
	UINT32 flag_I;
	UINT32 flag_S;

	UINT32 USP;
	UINT32 PC;

	UINT32 HaltState;
	INT32 IRQLine;
	INT32 IRQState;
	INT32 ICount;

	UINT32 BasePC;
	UINT32 Fetch[C68K_FETCH_BANK];

	UINT8  (*Read_Byte)(UINT32 address);
	UINT16 (*Read_Word)(UINT32 address);
	UINT8  (*Read_Byte_PC_Relative)(UINT32 address);
	UINT16 (*Read_Word_PC_Relative)(UINT32 address);
	void (*Write_Byte)(UINT32 address, UINT8 data);
	void (*Write_Word)(UINT32 address, UINT16 data);

	INT32  (*Interrupt_CallBack)(INT32 irqline);
	void (*Reset_CallBack)(void);

} c68k_struc;

* TODO: まずはxkeropiのレジスタ関連をocps2のc68k_strucにマッピングする

xkeropi側のレジスタは68kem.asm内の_regsが実態。
これをextern m68k_regs regs;としてC言語側に見せている。

* TODO: stack pointerの扱いがよくわからん
-> 

- A7がスタックポインタ
- スタックポインタはユーザーモードと特権モードで異なる
- ステータスレジスタのSビット(13bit目)が1ならスーパーバイザーモード

cps2側はc68k_struc内にa[7], USPの二つ
xkeropi側はm68k_regs内にa[7], isp, uspの三つ

xkeropiのCコードでispを触るのはここだけ。あとはR_ISPとしてアセンブラコードのMPUコアで操作されるのみ。
x11/winx68k.cpp:        regs.a[7] = regs.isp = (IPL[0x30001]<<24)|(IPL[0x30000]<<16)|(IPL[0x30003]<<8)|IPL[0x30002];

xkeropiのCコードでuspを触る個所はない。アセンブラコード内で操作されるのみ。

* cps2のCPU初期化
cps2/cps2.c/cps2_main()
 cps2/cps2.c/cps2_init()
  cps2/drive.c/cps2_drive_init()
   cps2/cps2crpt.c/cps2_init_68k()
    m68000.c/m68000_init()

* m68000_init()の解析

- メモリのbyte/word単位のread/write関数のセットC68k_Set_ReadB(&C68K, Memory_ReadB);等
  keropiではアセンブリではcpu_readmem24{,_word,_dword}のだが、xkeropiではC言語で書かれたmem_wrap.c/cpu_readmem24{,_word,_dword}()があるではないか。
すばらしい。現状使われていないようだが、これを有効にしよう。

x68k/memory.h:#define   Memory_ReadB            cpu_readmem24
x68k/memory.h:#define Memory_ReadW              cpu_readmem24_word
x68k/memory.h:#define Memory_ReadD              cpu_readmem24_dword

#define m68k_read_memory_8(address)  Memory_ReadB(address)

* 2013/07/25
R_IRQ	 DD 0			 ; IRQ Request Level
:
R_IRQ_CALLBACK	 DD 0			 ; irq callback (get vector)

struct m68k_regs {
DWORD IRQ_level;
:
void *irq_callback;
}

** 2013/07/29

* 残るアセンブリコードの洗い出し
-> done
- x11/windraw.c [done]
- x68k/bga.asm [deleted]
- x68k/tvram.c [done]
- x68k/bg.c 少々手直し、追加[done]
- x68k/gvram.c [done]
- x68k/crtc.c [done]

* x68k/bg.c/Sprite_DrawLineMcr()でsegvる
-> 修正done

%macro  Sprite_DrawLineMcr      2 (%2が引数でint pri)
        mov     ebp, [TextDotX]
        add     ebp, 16
        mov     edx, 127 * 8
spline_%1_lp:
        mov     al, [Sprite_Regs + spritectrltbl.sprite_ply + edx]
        and     al, 3
        cmp     al, %2
	; sctp = &sct[edx/sizeof(spritectrltbl)];
	; if (sctp->sprite_ply & 3 == pri)
        je      spline_%1_plyhit
spline_%1_lpcnt:
        sub     dx, 8
        jns     spline_%1_lp
        jmp     spline_%1_ed
spline_%1_plyhit:
        movzx   edi, word [Sprite_Regs + spritectrltbl.sprite_posx + edx]
        add     edi, [BG_HAdjust]
        and     di, 3ffh
	; if (sctp->sprite_posx + BG_HAdjust) & 0x3ff)
	;     ~~~~xxx: sctp not sct 
        cmp     edi, ebp
        jnc     spline_%1_lpcnt
	; if (t >= TextDotX + 16)
	;       ~~xxx: >= not > (=でもcarry flagはセットされない)
        movzx   eax, word [Sprite_Regs + spritectrltbl.sprite_posy + edx]
        and     ax, 3ffh
	; y = sctp->sprite_posy & 0x3fff
        sub     eax, [VLINEBG]
        add     eax, [BG_VLINE]
        neg     eax
        add     eax, 16
	; y -= VLINEBG, y+= BG_VLINE, y = -y, y+= 16
        jnc     spline_%1_lpcnt
        shl     al, 4
	; y *= 16; //xxx忘れるな
        movzx   esi, word [Sprite_Regs + spritectrltbl.sprite_ctrl + edx]
        mov     bx, si
	; bx = sctp->sprite_ctrl
        shl     si, 8
	si = sctp->scrite_ctrl * 256; //xxx忘れるな
        cmp     bh, 40h
        jc      spline_%1_flipx
	; if (sctp->sprite_ctrl < 0x4000)
        js      spline_%1_fxflipy //サインフラグは引き算後マイナスでよい？
	; else if (sctp->sprite_ctrl - 0x4000 & 0x8000)
        jge     spline_%1_fxflipx
	; else if (sctp->sprite_ctrl >= 0x4000)
        xor     al, 0f0h
	; else y ^= 0xf0;
spline_%1_flipx:
        lea     esi, [BGCHR16 + esi + eax]
	; esi = BGCHR16[(sctp->sprite_ctrl * 256) & 0xffff + (y * 16)]
        cld ; directioin flagをクリア -> インクリメント方向
spline_%1_out:
        shl     bh, 4
        mov     ecx, 16
spline_%1_outlp:
        lodsb ; al = *esi;
        and     ax, 0fh
        je      spline_%1_trans
        or      al, bh
        cmp     [BG_PriBuf + edi * 2], dx
        jc      spline_%1_trans
        mov     ax, [TextPal + eax * 2]
        mov     [BG_LineBuf + edi * 2], ax
        or      byte [Text_TrFlag + edi], 2
        mov     [BG_PriBuf + edi * 2], dx
spline_%1_trans:
        inc     edi
        loop    spline_%1_outlp
        jmp     spline_%1_lpcnt
spline_%1_fxflipy:
        xor     al, 0f0h
spline_%1_fxflipx:
        lea     esi, [BGCHR16 + esi + eax + 15]
        std
        jmp     spline_%1_out
spline_%1_ed:
%endmacro

* BG_DrawLineMcrX()がない
-> done


